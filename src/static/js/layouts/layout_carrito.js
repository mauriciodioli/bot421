$(document).ready(function () {
    // Manejador de eventos para cada √≠tem del men√∫
    $('.custom-dropdown-menu .dropdown-item').on('click', function (e) {
        e.preventDefault();
        const selectedItem = $(this).attr('id');
        localStorage.setItem('dominio', selectedItem);
        cargarPublicaciones(selectedItem, 'layout');

        // Ocultar el men√∫ despu√©s de hacer clic en un √≠tem
        $('.custom-dropdown-menu').hide();
    });

    // Mostrar u ocultar el men√∫ desplegable al hacer clic en el bot√≥n
    $('.close-layout-btn').on('click', function () {
        $('.custom-dropdown-menu').toggle();
    });

    // Evitar que el men√∫ se cierre cuando se haga clic dentro del contenedor
    $('.custom-dropdown-menu').on('click', function(e) {
        e.stopPropagation(); // Evitar que se propague el clic y cierre el men√∫
    });

    // Cerrar el layout al hacer clic en el bot√≥n de cerrar
    $('#closeLayout').on('click', function () {
        $('#bottomLayout').addClass('hidden');
    });

    // Mantener la funcionalidad de mostrar/ocultar el layout con scroll
    let lastScrollTop = 0; // √öltima posici√≥n del scroll
    let scrolling = false; // Estado de scroll en curso

    $(window).on('scroll', function () {
        scrolling = true;

        // Obtener la posici√≥n actual del scroll
        const currentScrollTop = $(this).scrollTop();

        if (currentScrollTop > lastScrollTop) {
            // Scroll hacia abajo -> ocultar el layout
            $('#bottomLayout').addClass('hidden');
        } else {
            // Scroll hacia arriba -> mostrar el layout
            $('#bottomLayout').removeClass('hidden');
        }

        lastScrollTop = currentScrollTop; // Actualizar la √∫ltima posici√≥n del scroll
    });

    // Comprobar si el usuario est√° en reposo (sin scroll) despu√©s de 2 segundos
    setInterval(function () {
        if (!scrolling) {
            $('#bottomLayout').removeClass('hidden'); // Mostrar el layout si no hay scroll
        }
        scrolling = false; // Reiniciar el estado de scroll
    }, 2000);
});

document.addEventListener("DOMContentLoaded", () => {
    const dropdownButton = document.getElementById("dropdownButton");
    const dropdownMenu = document.getElementById("dropdownMenu");
    const dropdownContainer = document.getElementById("dropdownContainer");
    
    if (!dropdownButton || !dropdownMenu || !dropdownContainer) {
        console.error("Uno o m√°s elementos no existen en el DOM.");
        return;
    }

    // Mostrar el men√∫ al hacer clic en el bot√≥n
    dropdownButton.addEventListener("click", (event) => {
        event.stopPropagation(); // Evita que el clic cierre el men√∫
        dropdownMenu.style.display =
            dropdownMenu.style.display === "flex" ? "none" : "flex";
    });

    // Cerrar el men√∫ cuando se haga clic fuera del contenedor
    document.addEventListener("click", () => {
        dropdownMenu.style.display = "none";
    });

    // Evitar que el men√∫ se cierre al hacer clic dentro del contenedor
    dropdownContainer.addEventListener("click", (event) => {
        event.stopPropagation();
    });

    // Cerrar el men√∫ al seleccionar un elemento
    dropdownMenu.querySelectorAll("a").forEach((item) => {
        item.addEventListener("click", () => {
            dropdownMenu.style.display = "none"; // Cerrar men√∫ despu√©s de seleccionar un √≠tem
        });
    });
});
















document.addEventListener('DOMContentLoaded', function () {

    
    const dropdownMenu = document.querySelector('.custom-dropdown-menu');

    // Funci√≥n para cargar los √°mbitos desde el servidor
    window.cargarAmbitos = function ()  {
        fetch('/social-media-publicaciones-obtener-ambitos/', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al obtener los √°mbitos.');
                }
                return response.json();
            })
            .then(data => {
                const dropdownMenu = $('.custom-dropdown-menu'); // Usa jQuery para seleccionar el men√∫

                // Limpiar el men√∫ existente
                dropdownMenu.empty();
                const iconosPorAmbito = {
                    "Personal": "üë§",
                    "Laboral": "üíº",
                    "Educacion": "üìö",
                    "Negocios": "üìà",
                    "Arte": "üé®",
                    "Deporte": "‚öΩ",
                    "Social": "üë•",
                    "Familia": "üë®‚Äçüë©‚Äçüëß",
                    "Salud": "üè•",
                    "Animales": "üê∂",
                    "Amistad": "üßë", // √çcono de una persona para Amistad
                    "Filantropia": "ü§ù", // √çcono para Filantrop√≠a
                    "Turismo": "‚úàÔ∏è", // √çcono para Turismo                 
                    "Tecnolog√≠a": "üíª",
                    "Regionales": "üßâ", // √çcono de mate para Regionales                   
                    "Work": "üíº", // Laboral
                    "Education": "üìö", // Educaci√≥n
                    "Business": "üìà", // Negocios
                    "Art": "üé®", // Arte
                    "Sports": "‚öΩ", // Deporte
                    "Social": "üë•", // Social
                    "Family": "üë®‚Äçüë©‚Äçüëß", // Familia
                    "Health": "üè•", // Salud
                    "Pets": "üê∂", // Animales
                    "Friendship": "üßë", // Amistad
                    "Philanthropy": "ü§ù", // Filantrop√≠a
                    "Tourism": "‚úàÔ∏è", // Turismo
                    "Technology": "üíª", // Tecnolog√≠a
                    "Regional": "üßâ" // Regionales
                };
                // Agregar los √°mbitos din√°micamente al men√∫
                data.forEach(ambito => {
                    const icono = iconosPorAmbito[ambito.nombre] || ""; // Obtener el √≠cono correspondiente
                    const listItem = `
                        <li>
                            <a href="#" class="dropdown-item" id="${ambito.valor}">
                              ${icono} ${ambito.nombre}
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                    `;
                  
                    dropdownMenu.append(listItem);
                });
                
                // Agregar el elemento "Turing test" al final del men√∫
               
                
                // Eliminar el √∫ltimo separador
                dropdownMenu.children('li').last().remove();
            })
            .catch(error => {
                console.error('Error al cargar los √°mbitos:', error);
            });
    }

    // Funci√≥n para manejar clics en los elementos del men√∫
    function agregarEventosClick() {
        const menuItems = document.querySelectorAll('.custom-dropdown-menu .dropdown-item');
        menuItems.forEach(item => {
            item.addEventListener('click', function (event) {
                event.preventDefault();
                const ambito = this.textContent; // Obtener el texto del elemento clicado
              
            });
        });
    }

  

    // Llamar a la funci√≥n para cargar los √°mbitos al cargar la p√°gina
    cargarAmbitos();
});

















